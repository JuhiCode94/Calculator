# Form implementation generated from reading ui file 'juhicalc.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(310, 500)
        MainWindow.setMinimumSize(QtCore.QSize(310, 500))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(100, 100))
        self.centralwidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.gridLayout_2.setContentsMargins(10, 10, 10, 10)
        self.gridLayout_2.setSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setMinimumSize(QtCore.QSize(50, 20))
        self.scrollArea.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 266, 137))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 0))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.outputlabel = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.outputlabel.setStyleSheet("font: 700 25pt \"Segoe UI\";")
        self.outputlabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.outputlabel.setObjectName("outputlabel")
        self.gridLayout.addWidget(self.outputlabel, 0, 0, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_2.addWidget(self.scrollArea, 0, 0, 1, 4)
        self.clearButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.clear_it())
        self.clearButton.setMinimumSize(QtCore.QSize(50, 40))
        self.clearButton.setMaximumSize(QtCore.QSize(50, 40))
        self.clearButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\";  color: rgb(255, 0, 0);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.clearButton.setObjectName("clearButton")
        self.gridLayout_2.addWidget(self.clearButton, 1, 3, 1, 1)
        self.allclearButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.all_clear("C"))
        self.allclearButton.setMinimumSize(QtCore.QSize(50, 40))
        self.allclearButton.setMaximumSize(QtCore.QSize(50, 40))
        self.allclearButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\";  color: rgb(255, 0, 0);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.allclearButton.setObjectName("allclearButton")
        self.gridLayout_2.addWidget(self.allclearButton, 2, 0, 1, 1)
        self.percentButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_percentage())
        self.percentButton.setMinimumSize(QtCore.QSize(50, 40))
        self.percentButton.setMaximumSize(QtCore.QSize(50, 40))
        self.percentButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.percentButton.setObjectName("percentButton")
        self.gridLayout_2.addWidget(self.percentButton, 2, 1, 1, 1)
        self.bracketsButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_parentheses())
        self.bracketsButton.setMinimumSize(QtCore.QSize(50, 40))
        self.bracketsButton.setMaximumSize(QtCore.QSize(50, 40))
        self.bracketsButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.bracketsButton.setObjectName("bracketsButton")
        self.gridLayout_2.addWidget(self.bracketsButton, 2, 2, 1, 1)
        self.divideButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_division())
        self.divideButton.setMinimumSize(QtCore.QSize(50, 40))
        self.divideButton.setMaximumSize(QtCore.QSize(50, 40))
        self.divideButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.divideButton.setObjectName("divideButton")
        self.gridLayout_2.addWidget(self.divideButton, 2, 3, 1, 1)
        self.sevenButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("7"))
        self.sevenButton.setMinimumSize(QtCore.QSize(50, 40))
        self.sevenButton.setMaximumSize(QtCore.QSize(50, 40))
        self.sevenButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.sevenButton.setObjectName("sevenButton")
        self.gridLayout_2.addWidget(self.sevenButton, 3, 0, 1, 1)
        self.eightButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("8"))
        self.eightButton.setMinimumSize(QtCore.QSize(50, 40))
        self.eightButton.setMaximumSize(QtCore.QSize(50, 40))
        self.eightButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.eightButton.setObjectName("eightButton")
        self.gridLayout_2.addWidget(self.eightButton, 3, 1, 1, 1)
        self.nineButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("9"))
        self.nineButton.setMinimumSize(QtCore.QSize(50, 40))
        self.nineButton.setMaximumSize(QtCore.QSize(50, 40))
        self.nineButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.nineButton.setObjectName("nineButton")
        self.gridLayout_2.addWidget(self.nineButton, 3, 2, 1, 1)
        self.xButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_multiplication())
        self.xButton.setMinimumSize(QtCore.QSize(50, 40))
        self.xButton.setMaximumSize(QtCore.QSize(50, 40))
        self.xButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.xButton.setObjectName("xButton")
        self.gridLayout_2.addWidget(self.xButton, 3, 3, 1, 1)
        self.fourButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("4"))
        self.fourButton.setMinimumSize(QtCore.QSize(50, 40))
        self.fourButton.setMaximumSize(QtCore.QSize(50, 40))
        self.fourButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.fourButton.setObjectName("fourButton")
        self.gridLayout_2.addWidget(self.fourButton, 4, 0, 1, 1)
        self.fiveButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("5"))
        self.fiveButton.setMinimumSize(QtCore.QSize(50, 40))
        self.fiveButton.setMaximumSize(QtCore.QSize(50, 40))
        self.fiveButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.fiveButton.setObjectName("fiveButton")
        self.gridLayout_2.addWidget(self.fiveButton, 4, 1, 1, 1)
        self.sixButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("6"))
        self.sixButton.setMinimumSize(QtCore.QSize(50, 40))
        self.sixButton.setMaximumSize(QtCore.QSize(50, 40))
        self.sixButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.sixButton.setObjectName("sixButton")
        self.gridLayout_2.addWidget(self.sixButton, 4, 2, 1, 1)
        self.minusButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_subtraction())
        self.minusButton.setMinimumSize(QtCore.QSize(50, 40))
        self.minusButton.setMaximumSize(QtCore.QSize(50, 40))
        self.minusButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.minusButton.setObjectName("minusButton")
        self.gridLayout_2.addWidget(self.minusButton, 4, 3, 1, 1)
        self.oneButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("1"))
        self.oneButton.setMinimumSize(QtCore.QSize(50, 40))
        self.oneButton.setMaximumSize(QtCore.QSize(50, 40))
        self.oneButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.oneButton.setObjectName("oneButton")
        self.gridLayout_2.addWidget(self.oneButton, 5, 0, 1, 1)
        self.twoButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("2"))
        self.twoButton.setMinimumSize(QtCore.QSize(50, 40))
        self.twoButton.setMaximumSize(QtCore.QSize(50, 40))
        self.twoButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.twoButton.setObjectName("twoButton")
        self.gridLayout_2.addWidget(self.twoButton, 5, 1, 1, 1)
        self.threeButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("3"))
        self.threeButton.setMinimumSize(QtCore.QSize(50, 40))
        self.threeButton.setMaximumSize(QtCore.QSize(50, 40))
        self.threeButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.threeButton.setObjectName("threeButton")
        self.gridLayout_2.addWidget(self.threeButton, 5, 2, 1, 1)
        self.plusButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_addition())
        self.plusButton.setMinimumSize(QtCore.QSize(50, 40))
        self.plusButton.setMaximumSize(QtCore.QSize(50, 40))
        self.plusButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.plusButton.setObjectName("plusButton")
        self.gridLayout_2.addWidget(self.plusButton, 5, 3, 1, 1)
        self.plusmiusButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_negative())
        self.plusmiusButton.setMinimumSize(QtCore.QSize(50, 40))
        self.plusmiusButton.setMaximumSize(QtCore.QSize(50, 40))
        self.plusmiusButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.plusmiusButton.setObjectName("plusmiusButton")
        self.gridLayout_2.addWidget(self.plusmiusButton, 6, 0, 1, 1)
        self.zeroButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.press_it("0"))
        self.zeroButton.setMinimumSize(QtCore.QSize(50, 40))
        self.zeroButton.setMaximumSize(QtCore.QSize(50, 40))
        self.zeroButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(222, 222, 222);\n"
"font: 700 16pt \"Segoe UI\"; \n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"    background-color: rgb(138, 138, 138);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    background-color: rgb(179, 179, 179);\n"
"}\n"
"")
        self.zeroButton.setObjectName("zeroButton")
        self.gridLayout_2.addWidget(self.zeroButton, 6, 1, 1, 1)
        self.decimalButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.add_decimal())
        self.decimalButton.setMinimumSize(QtCore.QSize(50, 40))
        self.decimalButton.setMaximumSize(QtCore.QSize(50, 40))
        self.decimalButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.decimalButton.setObjectName("decimalButton")
        self.gridLayout_2.addWidget(self.decimalButton, 6, 2, 1, 1)
        self.equalButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked = lambda: self.math_it())
        self.equalButton.setMinimumSize(QtCore.QSize(50, 40))
        self.equalButton.setMaximumSize(QtCore.QSize(50, 40))
        self.equalButton.setStyleSheet("QPushButton\n"
"{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 700 14pt \"Segoe UI\"; color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"QPushButton:Hover\n"
"{\n"
"background-color: rgb(57, 57, 57);\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"    \n"
"    background-color: rgb(36, 36, 36);\n"
"}\n"
"")
        self.equalButton.setObjectName("equalButton")
        self.gridLayout_2.addWidget(self.equalButton, 6, 3, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 310, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Define keyboard shortcuts for buttons
        self.bracketsButton.setShortcut("(") # Assign the "(" key to the parentheses button
        self.sevenButton.setShortcut("7") # Assign the "7" key to the seven button
        self.eightButton.setShortcut("8") # Assign the "8" key to the eight button
        self.nineButton.setShortcut("9") # Assign the "9" key to the nine button
        self.fourButton.setShortcut("4") # Assign the "4" key to the four button
        self.fiveButton.setShortcut("5") # Assign the "5" key to the five button
        self.sixButton.setShortcut("6") # Assign the "6" key to the six button
        self.oneButton.setShortcut("1") # Assign the "1" key to the one button
        self.twoButton.setShortcut("2") # Assign the "2" key to the two button
        self.threeButton.setShortcut("3") # Assign the "3" key to the three button
        self.plusmiusButton.setShortcut("F9") # Assign the "F9" key to the plusmius button
        self.zeroButton.setShortcut("0") # Assign the "0" key to the zero button
        self.percentButton.setShortcut("%") # Assign the "%" key to the percent button
        self.decimalButton.setShortcut(".") # Assign the "." key to the decimal button
        self.clearButton.setShortcut("Backspace")  # Assign the "Backspace" key to the clear button
        self.allclearButton.setShortcut("Delete") # Assign the "Delete" key to the all clear button
        self.plusButton.setShortcut("+")  # Assign the "+" key to the addition button
        self.minusButton.setShortcut("-")  # Assign the "-" key to the subtraction button
        self.xButton.setShortcut("*")  # Assign the "*" key to the multiplication button
        self.divideButton.setShortcut("/")  # Assign the "/" key to the division button
        self.equalButton.setShortcut("Return")  # Assign the "Return" key to the equal button

# Division button
    def add_division(self):
        try:
            current_text = self.outputlabel.text()
            if current_text:
                last_char = current_text[-1]

                # Check if the last character is an open parenthesis
                if last_char == '(':
                    # Do not add the division operator after an open parenthesis
                    return

                if last_char in ['+', '-', '÷', 'x']:
                    # If the last character is an operator, replace it with the division operator
                    self.outputlabel.setText(current_text[:-1] + "÷")
                else:
                    # Otherwise, append the division operator
                    self.outputlabel.setText(current_text + "÷")
        except:
            self.outputlabel.setText("")

# Subtraction button
    def add_subtraction(self):
        try:
            current_text = self.outputlabel.text()
            if current_text:
                if current_text[-1] in ['+', '-', '÷', 'x']:
                    # If the last character is an operator, replace it with the subtraction operator
                    self.outputlabel.setText(current_text[:-1] + "-")
                else:
                    # Otherwise, append the subtraction operator
                    self.outputlabel.setText(current_text + "-")
        except:
            self.outputlabel.setText("")

# Addition button
    def add_addition(self):
        try:
            current_text = self.outputlabel.text()
            if current_text:
                if current_text[-1] in ['+', '-', '÷', 'x']:
                    # If the last character is an operator, replace it with the addition operator
                    self.outputlabel.setText(current_text[:-1] + "+")
                else:
                    # Otherwise, append the addition operator
                    self.outputlabel.setText(current_text + "+")
        except:
            self.outputlabel.setText("")                 
                 
# Change from positive/negative(plus_minus button)
    def add_negative(self):
        try:
            current_text = self.outputlabel.text()
            lines = current_text.split('\n')

             # Check if the last line starts with a '-'
            if lines[-1].startswith('-'):
                # Replace the '-' with '(-'
                lines[-1] = '(-' + lines[-1][1:]
            else:     
                # Find the last number in the current line
                last_number_index = 0
                for i in range(len(lines[-1]) - 1, -1, -1):
                    if not lines[-1][i].isdigit() and lines[-1][i] not in ['.', ',']:
                        last_number_index = i + 1
                        break

                # Check if the last characters are already a negative sign
                if lines[-1] and lines[-1][last_number_index - 2:last_number_index] == '(-':
                    # Remove the negative sign
                    lines[-1] = lines[-1][:last_number_index - 2] + lines[-1][last_number_index:]
                elif lines[-1] and lines[-1][last_number_index - 1] in ['+', '-', 'x', '÷']:
                    # Add the negative sign
                    lines[-1] = lines[-1][:last_number_index] + '(-' + lines[-1][last_number_index:]
                elif lines[-1] and lines[-1][-1] in [')', '%']:
                    lines[-1] += 'x(-'     
                else:
                    # Add the negative sign
                    lines[-1] = lines[-1][:last_number_index] + '(-' + lines[-1][last_number_index:]

            # Update the outputlabel text
            new_text = '\n'.join(lines)
            self.outputlabel.setText(new_text)

        except:
            self.outputlabel.setText("")

# Decimal button
    def add_decimal(self):
        try:
            screen = self.outputlabel.text()

            # Check if the screen is empty
            if not screen:
                self.outputlabel.setText("0.")
            else:
                # Find the last operator in the screen
                operators = "+-x÷()%"
                last_operator_index = max(screen.rfind(op) for op in operators)

            # Check if there's no decimal point after the last operator
            if last_operator_index != -1 and "." not in screen[last_operator_index:]:
                # Check if there are no digits after the operator
                if not any(char.isdigit() for char in screen[last_operator_index:]):
                    self.outputlabel.setText(f"{screen}0.")
                else:
                    self.outputlabel.setText(f"{screen}.")
            # Check if there's no decimal point before the last operator
            elif "." not in screen:
                self.outputlabel.setText(f"{screen}.")
        except:
            self.outputlabel.setText("")

# Percentage button
    def add_percentage(self):
        try:
            # Get the current text from the output label
            screen_text = self.outputlabel.text()

            # Check if the text is not empty
            if screen_text:
                # Check if the last character is a number, decimal point, comma, or closing parenthesis
                if screen_text[-1].isdigit() or screen_text[-1] in {'.', ',', ')'}:
                    # Find the index of the last opening parenthesis
                    last_open_parenthesis = screen_text.rfind('(')

                    # Check if there is an opening parenthesis before the closing parenthesis
                    if last_open_parenthesis != -1:
                        # Append the percentage sign after the closing parenthesis
                        new_text = f"{screen_text[:last_open_parenthesis + 1]}{screen_text[last_open_parenthesis + 1:]}%"
                    else:
                        # Append the percentage sign to the text
                        new_text = f"{screen_text}%"
                else:
                    # If the last character is an operator, do not append the percentage sign
                    new_text = screen_text

                # Update the output label with the new text
                self.outputlabel.setText(new_text)
            else:
                # If the text is empty, set it to "0%" by default
                self.outputlabel.setText("")
            
        except:
            self.outputlabel.setText("")

# Multiplication button
    def add_multiplication(self):
        try:
            current_text = self.outputlabel.text()
            if current_text:
                last_char = current_text[-1]

                # Check if the last character is an open parenthesis
                if last_char == '(':
                    # Do not add the multiplication operator after an open parenthesis
                    return

                if last_char in ['+', '-', '÷', 'x']:
                # If the last character is an operator, replace it with the new operator
                   self.outputlabel.setText(current_text[:-1] + "x")
                else:
                # Otherwise, append the multiplication operator
                   self.outputlabel.setText(current_text + "x")
        except:
            self.outputlabel.setText("")        
    
# Parentheses() button  
    def add_parentheses(self):
        try:
            current_text = self.outputlabel.text()
            open_parenthesis = current_text.count("(")
            close_parenthesis = current_text.count(")")
    
            if open_parenthesis > close_parenthesis and current_text[-1] in ['+', '-', '÷', 'x']:
                self.outputlabel.setText(current_text + "(")
            elif open_parenthesis > close_parenthesis and current_text[-1] != "(":
                self.outputlabel.setText(current_text + ")")  
            elif current_text and (current_text[-1].isnumeric() or current_text[-1] == ")"):
                # If the last character is a number or a closing parenthesis, append 'x('
                self.outputlabel.setText(current_text + "x(")
                # If the last character is %, append 'x('
            elif current_text and current_text[-1] == "%":
                # If the last character is a percentage sign, append 'x('
                self.outputlabel.setText(current_text + "x(")  
            else:
                # Otherwise, simply append an open parenthesis
                self.outputlabel.setText(current_text + "(")
        except:
            self.outputlabel.setText("")             

# Clear one character with the red 'x' button
    def clear_it(self):
        screen = self.outputlabel.text()
        screen = screen[:-1]
        self.outputlabel.setText(screen)

# Clearing the input with the 'C' button
    def all_clear(self, pressed):
        if pressed == "C":
            self.outputlabel.setText("0")
        else:
            if self.outputlabel.text() == "0":
                self.outputlabel.setText("")

# This function updates the displayed expression based on user input, handling numeric input, operators (+, -, x, ÷, %), and clearing the input with the 'C' button.
    def press_it(self, pressed):         
        current_text = self.outputlabel.text()

        if pressed in "+-x÷()%.=":
            current_text += pressed
        else:
            # Check if the last pressed character is '%' and the current pressed is a digit
            if current_text.endswith('%') and pressed.isdigit():
                current_text += 'x' + pressed
            else:
                current_text += pressed

        # Replace special characters like "÷" and "x"
        current_text_cleaned = current_text.replace('÷', '÷').replace('x', 'x')

        lines = current_text_cleaned.split('\n')

        formatted_lines = []

        for line in lines:
            operators = "+-x÷()%.="
            parts = []
            current_part = ""

            for char in line:
                if char in operators:
                    parts.append(current_part)
                    parts.append(char)
                    current_part = ""
                else:
                    current_part += char

            parts.append(current_part)

            formatted_parts = []

            # Flag to check if the current part is after the addition operator
            after_decimal = False

            for part in parts:
                # Convert to float for calculations
                try:
                    part_float = float(part.replace(',', ''))
                
                    # Check if the current part is after the addition operator
                    if after_decimal:
                        formatted_part = "{:.0f}".format(part_float)  # Format without commas
                    else:
                        formatted_part = "{:,.0f}".format(part_float)  # Format with commas

                    formatted_parts.append(formatted_part)
                    after_decimal = False  # Reset the flag
                except ValueError:
                    formatted_parts.append(part)
                    after_decimal = ('.' in part)  # Set the flag if the part contains '+'

            formatted_line = ''.join(formatted_parts)   
            # Break line visually after every 20 characters
            # visual_lines = [formatted_line[i:i+20] for i in range(0, len(formatted_line), 20)]
            # formatted_lines.append('\n'.join(visual_lines))
            formatted_lines.append(formatted_line)

        formatted_text = '\n'.join(formatted_lines)
        self.outputlabel.setText(formatted_text)

# Equal button
    def math_it(self):
        try:
            current_text = self.outputlabel.text()
            screen = current_text.split('=')[-1]  # Extract the last result
            current_text = "".join(screen.split('\n'))

            # Automatically balance parentheses
            current_text = self.balance_parentheses(current_text)

            screen_for_eval = current_text.replace("÷", "/").replace("x", "*").replace(",", "")
            
            if '%' in screen_for_eval:
                screen_for_eval = self.replace_percentages(screen_for_eval)

            result = eval(screen_for_eval)

            # Calculate the necessary decimal places based on the precision of the result
            precision = len(str(result).split(".")[1]) if "." in str(result) else 0
            formatted_result = "{:,.{}f}".format(result, precision)

            if current_text == "":
                self.outputlabel.setText(formatted_result)
            else:
                # Append the result to the current expression
                self.outputlabel.setText(f"{current_text}=\n{formatted_result}")                    
            
        except:
            self.outputlabel.setText("")

    def replace_percentages(self, expression):
        # Replace percentages with their decimal equivalents
        parts = []
        current_number = ""

        for char in expression:
            if char.isdigit() or char == '.':
                current_number += char
            elif char == '%':
                if current_number:
                    parts.append(str(float(current_number) / 100))
                    current_number = ""
            else:
                if current_number:
                    parts.append(current_number)
                    current_number = ""
                parts.append(char)

        # Check if there's a number at the end of the string
        if current_number:
            parts.append(current_number)

        return ''.join(parts)     

    def balance_parentheses(self, expression): 
        # Function to balance parentheses
        open_parentheses = expression.count("(")
        close_parentheses = expression.count(")")
        balanced_expression = expression + ")" * (open_parentheses - close_parentheses)
        return balanced_expression  

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.outputlabel.setText(_translate("MainWindow", "0"))
        self.clearButton.setText(_translate("MainWindow", "x"))
        self.allclearButton.setText(_translate("MainWindow", "C"))
        self.percentButton.setText(_translate("MainWindow", "%"))
        self.bracketsButton.setText(_translate("MainWindow", "( )"))
        self.divideButton.setText(_translate("MainWindow", "÷"))
        self.sevenButton.setText(_translate("MainWindow", "7"))
        self.eightButton.setText(_translate("MainWindow", "8"))
        self.nineButton.setText(_translate("MainWindow", "9"))
        self.xButton.setText(_translate("MainWindow", "x"))
        self.fourButton.setText(_translate("MainWindow", "4"))
        self.fiveButton.setText(_translate("MainWindow", "5"))
        self.sixButton.setText(_translate("MainWindow", "6"))
        self.minusButton.setText(_translate("MainWindow", "-"))
        self.oneButton.setText(_translate("MainWindow", "1"))
        self.twoButton.setText(_translate("MainWindow", "2"))
        self.threeButton.setText(_translate("MainWindow", "3"))
        self.plusButton.setText(_translate("MainWindow", "+"))
        self.plusmiusButton.setText(_translate("MainWindow", "+/-"))
        self.zeroButton.setText(_translate("MainWindow", "0"))
        self.decimalButton.setText(_translate("MainWindow", "."))
        self.equalButton.setText(_translate("MainWindow", "="))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
